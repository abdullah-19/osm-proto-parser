/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package osm.proto.parser

import osm.proto.parser.adapter.buffer.FileBlock
import spock.lang.Specification

import java.util.concurrent.Flow

class OsmProtoParserSpec extends Specification {
    def "parser is able to stream file blocks read from given file"() {
        given: "there is sample pbf file"
        URL fileUrl = this.class.getResource("/sample.pbf")
        OsmProtoParser osmProtoParser = new OsmProtoParser(fileUrl.toURI().toString().replace("file:/", ""))

        expect: "when parser is subscribed it should stream all file blocks from file"
        osmProtoParser.subscribe(new Flow.Subscriber<FileBlock>() {
            @Override
            void onSubscribe(Flow.Subscription subscription) { }

            @Override
            void onNext(FileBlock item) {
                assert !item.getType().isEmpty()
            }

            @Override
            void onError(Throwable throwable) { }

            @Override
            void onComplete() {
                assert true
            }
        })
    }

    def "parser is able to provide file block from given position in file"() {
        given: "there is sample pbf file"
        URL fileUrl = this.class.getResource("/sample.pbf")
        OsmProtoParser osmProtoParser = new OsmProtoParser(fileUrl.toURI().toString().replace("file:/", ""))

        when: "user asks for file block from given correct position"
        FileBlock fileBlock = osmProtoParser.getFileBlockAtPosition(0)

        then: "file block is properly loaded"
        fileBlock.getDataOffset() == 0
        !fileBlock.getType().isEmpty()
    }
}
